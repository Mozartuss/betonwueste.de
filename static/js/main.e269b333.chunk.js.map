{"version":3,"sources":["components/ScrollStepComponent.tsx","components/TimeLineComponent.tsx","components/ScrollComponent.tsx","components/InteractiveMap.tsx","components/WelcomeComponent.tsx","App.tsx","report-web-vitals.ts","index.tsx"],"names":["ScrollStepComponent","useEffect","label","document","querySelector","steps","childNodes","forEach","element","addEventListener","el","classList","replace","add","result","previousElementSibling","push","prevAll","slice","onHover","className","DistrictComponent","ScrollComponent","props","useState","data","progress","getState","setGetState","console","log","id","style","display","mapComponent","onStepEnter","e","state","onStepExit","direction","onStepProgress","offset","debug","map","value","isVisible","background","visibility","Math","round","InteractiveMap","hoverCountryStyle","fillColor","fillOpacity","color","weight","MapContainer","zoom","height","width","center","scrollWheelZoom","dragging","keyboard","GeoJSON","regierungsbezirke","onEachFeature","feature","layer","name","properties","NAME_2","bindPopup","on","mouseover","event","target","setStyle","openPopup","mouseout","closePopup","WelcomeComponent","to","smooth","spy","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e269b333.chunk.js","sourcesContent":["import \"../style/ScrollStepComponent.scss\";\nimport { useEffect } from \"react\";\n\nconst ScrollStepComponent = (): JSX.Element => {\n    const prevAll = (element: HTMLDivElement): HTMLDivElement[] => {\n        const result: HTMLDivElement[] = [];\n\n        while ((element = element.previousElementSibling as HTMLDivElement)) result.push(element);\n        return result;\n    };\n\n    const onHover = (el: HTMLDivElement, steps: HTMLDivElement[]): void => {\n        steps.forEach((element: HTMLDivElement) => {\n            element.classList.replace(\"current\", \"prev\");\n        });\n        el.classList.add(\"current\");\n        prevAll(el)\n            .slice(1)\n            .forEach((element) => element.classList.add(\"prev\"));\n    };\n\n    useEffect(() => {\n        const progressElement: HTMLDivElement = document.querySelector(\".progress\") as HTMLDivElement;\n        const label: HTMLDivElement = progressElement.querySelector(\".left\") as HTMLDivElement;\n        const steps: HTMLDivElement[] = [...(label.childNodes as NodeListOf<HTMLDivElement>)];\n        steps.forEach((element: HTMLDivElement) =>\n            element.addEventListener(\"click\", () => {\n                onHover(element, steps);\n            })\n        );\n    });\n\n    return (\n        <div className={\"outer\"}>\n            <div className={\"progress\"}>\n                <div className={\"left\"}>\n                    <div className={\"current\"}>Mittelfranken</div>\n                    <div>Niederbayern</div>\n                    <div>Oberbayern</div>\n                    <div>Oberfranken</div>\n                    <div>Oberpfalz</div>\n                    <div>Schwaben</div>\n                    <div>Unterfranken</div>\n                </div>\n                <div className={\"right\"}>\n                    <div className={\"current\"} />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ScrollStepComponent;\n","import \"../style/TimeLineComponent.scss\";\nimport { useEffect } from \"react\";\n\nconst DistrictComponent = (): JSX.Element => {\n    const prevAll = (element: HTMLDivElement): HTMLDivElement[] => {\n        const result: HTMLDivElement[] = [];\n\n        while ((element = element.previousElementSibling as HTMLDivElement)) result.push(element);\n        return result;\n    };\n\n    const onHover = (el: HTMLDivElement, steps: HTMLDivElement[]): void => {\n        steps.forEach((element: HTMLDivElement) => {\n            element.classList.replace(\"current\", \"prev\");\n        });\n        el.classList.add(\"current\");\n        prevAll(el)\n            .slice(1)\n            .forEach((element) => element.classList.add(\"prev\"));\n    };\n\n    useEffect(() => {\n        const progressElement: HTMLDivElement = document.querySelector(\".timeline-progress\") as HTMLDivElement;\n        const label: HTMLDivElement = progressElement.querySelector(\".below\") as HTMLDivElement;\n        const steps: HTMLDivElement[] = [...(label.childNodes as NodeListOf<HTMLDivElement>)];\n        steps.forEach((element: HTMLDivElement) =>\n            element.addEventListener(\"click\", () => {\n                onHover(element, steps);\n            })\n        );\n    });\n\n    return (\n        <div className={\"timeline-outer\"}>\n            <div className={\"timeline-progress\"}>\n                <div className={\"above\"}>\n                    <div className={\"current\"} />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                </div>\n                <div className={\"below\"}>\n                    <div className={\"current\"}>\n                        <p>1980</p>\n                    </div>\n                    <div>\n                        <p>1984</p>\n                    </div>\n                    <div>\n                        <p>1988</p>\n                    </div>\n                    <div>\n                        <p>1992</p>\n                    </div>\n                    <div>\n                        <p>1996</p>\n                    </div>\n                    <div>\n                        <p>2000</p>\n                    </div>\n                    <div>\n                        <p>2004</p>\n                    </div>\n                    <div>\n                        <p>2008</p>\n                    </div>\n                    <div>\n                        <p>2012</p>\n                    </div>\n                    <div>\n                        <p>2016</p>\n                    </div>\n                    <div>\n                        <p>2020</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DistrictComponent;\n","import { useState } from \"react\";\nimport { Scrollama, Step } from \"react-scrollama\";\nimport ScrollStepComponent from \"./ScrollStepComponent\";\nimport \"../style/ScrollComponent.scss\";\nimport TimeLineComponent from \"./TimeLineComponent\";\n\ninterface IState {\n    data: number;\n    steps: number[];\n    progress: number;\n}\n\nconst ScrollComponent = (props: { mapComponent: JSX.Element }): JSX.Element => {\n    const initialState: IState = {\n        data: 0,\n        steps: [10, 20, 30, 40],\n        progress: 0,\n    };\n\n    const [getState, setGetState] = useState<IState>(initialState);\n\n    const onStepEnter = (e) => {\n        const { data } = e;\n        setGetState((state: IState) => {\n            return { ...state, data: data };\n        });\n    };\n\n    const onStepExit = ({ direction, data }) => {\n        if (direction === \"up\" && data === getState.steps[0]) {\n            setGetState((state: IState) => {\n                return { ...state, data: 0 };\n            });\n        }\n    };\n\n    const onStepProgress = ({ progress }) => {\n        setGetState((state: IState) => {\n            return { ...state, progress: progress };\n        });\n    };\n\n    console.log(getState);\n\n    return (\n        <div>\n            <div id={\"main-component\"} style={{ display: \"block\" }}>\n                <div className=\"timeline\">\n                    <TimeLineComponent />\n                </div>\n                <div className=\"graphic-container\">\n                    <div className=\"graphic\">{props.mapComponent}</div>\n                    <div className=\"scroller\">\n                        <Scrollama\n                            onStepEnter={onStepEnter}\n                            onStepExit={onStepExit}\n                            progress\n                            onStepProgress={onStepProgress}\n                            offset=\"0.2\"\n                            debug\n                        >\n                            {getState.steps.map((value) => {\n                                const isVisible = value === getState.data;\n                                const background = isVisible ? `rgba(44,127,184, ${getState.progress})` : \"white\";\n                                const visibility = isVisible ? \"visible\" : \"hidden\";\n                                return (\n                                    <Step data={value} key={value}>\n                                        <div className=\"step\" style={{ background }}>\n                                            <p>step value: {value}</p>\n                                            <p style={{ visibility }}>\n                                                {Math.round(getState.progress * 1000) / 10 + \"%\"}\n                                            </p>\n                                        </div>\n                                    </Step>\n                                );\n                            })}\n                        </Scrollama>\n                    </div>\n                    <div className=\"district\">\n                        <ScrollStepComponent />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ScrollComponent;\n","import regierungsbezirke from \"../data/regierungsbezirke.json\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\nimport { Feature, GeoJsonObject } from \"geojson\";\nimport { Layer, LeafletEvent } from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\ninterface ICountryStyle {\n    fillColor: string;\n    fillOpacity: number;\n    color: string;\n    weight: number;\n}\n\nconst InteractiveMap: () => JSX.Element = () => {\n    const defaultCountryStyle: ICountryStyle = {\n        fillColor: \"red\",\n        fillOpacity: 0.5,\n        color: \"white\",\n        weight: 1,\n    };\n    const hoverCountryStyle: ICountryStyle = {\n        fillColor: \"red\",\n        fillOpacity: 1,\n        color: \"white\",\n        weight: 3,\n    };\n\n    const onEachFeature = (feature: Feature, layer: Layer): void => {\n        const name = feature.properties?.NAME_2;\n        layer.bindPopup(name);\n        layer.on({\n            mouseover: (event: LeafletEvent) => {\n                event.target.setStyle(hoverCountryStyle);\n                layer.openPopup();\n            },\n            mouseout: (event: LeafletEvent) => {\n                event.target.setStyle({\n                    fillColor: \"red\",\n                    fillOpacity: 0.5,\n                    color: \"white\",\n                    weight: 1,\n                });\n                layer.closePopup();\n            },\n        });\n    };\n\n    return (\n        <MapContainer\n            zoom={7}\n            style={{ height: \"100%\", width: \"100%\" }}\n            center={[48.7, 12]}\n            scrollWheelZoom={false}\n            dragging={false}\n            keyboard={false}\n        >\n            <GeoJSON\n                style={defaultCountryStyle}\n                data={regierungsbezirke as GeoJsonObject}\n                onEachFeature={onEachFeature}\n            />\n        </MapContainer>\n    );\n};\n\nexport default InteractiveMap;\n","import \"../style/WelcomeComponent.scss\";\nimport { Link } from \"react-scroll\";\n\nconst WelcomeComponent = (): JSX.Element => {\n    return (\n        <div className={\"welcome\"}>\n            <div className={\"title-container\"}>\n                <p className={\"title\"}>Betonwüste</p>\n                <p className={\"subtitle\"}>Flächenverbrauch Bayerns in Zahlen</p>\n            </div>\n            <Link to={\"main-component\"} smooth={true} spy={true}>\n                <div className={\"mouse-scroll\"}>\n                    <div className={\"mouse\"}>\n                        <div className={\"mouse-in\"} />\n                    </div>\n                    <div>\n                        <span className={\"down-arrow-1\"} />\n                        <span className={\"down-arrow-2\"} />\n                        <span className={\"down-arrow-3\"} />\n                    </div>\n                </div>\n            </Link>\n        </div>\n    );\n};\n\nexport default WelcomeComponent;\n","import ScrollComponent from \"./components/ScrollComponent\";\nimport InteractiveMap from \"./components/InteractiveMap\";\nimport WelcomeComponent from \"./components/WelcomeComponent\";\n\nfunction App(): JSX.Element {\n    return (\n        <>\n            <WelcomeComponent />\n            <ScrollComponent mapComponent={<InteractiveMap />} />\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./report-web-vitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}